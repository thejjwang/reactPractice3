{"ast":null,"code":"var _jsxFileName = \"/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/ToggleButton.js\",\n  _s = $RefreshSig$();\n// Exercise 4:\n// 1. Create a functional component called ToggleButton.\n// 2. Declare a state variable `isOn` using the `useState` hook. Initialize it with a value of `false`.\n// 3. Create a function `toggle` that will be called when the button is clicked:\n//    - Inside the function, update the `isOn` state by toggling its value between `true` and `false`.\n// 4. Render the user interface:\n//    - Display a button element with the text \"Toggle\".\n//      - Attach the `toggle` function to the `onClick` event.\n//    - Display a paragraph element to show the current state:\n//      - If `isOn` is `true`, display the text \"ON\".\n//      - If `isOn` is `false`, display the text \"OFF\".\n// 5. Export the `ToggleButton` component as the default export.\n\nimport { useState } from \"react\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ToggleButton = () => {\n  _s();\n  const [isOn, setIsOn] = useState(false);\n  const toggle = () => {\n    setIsOn(isOn ? false : true);\n    // isOn ? setIsOn(false) : setIsOn(true);\n    // if (isOn === false) {\n    //     setIsOn(true);\n    // } else {\n    //     setIsOn(false);\n    // }\n    let isRaining = true;\n    let weather;\n    if (isRaining) {\n      weather = \"It's raining\";\n    } else {\n      weather = \"It's not raining\";\n    }\n  };\n  // need to add toString() because the state \n  // needs to be converted to a string \n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggle,\n      children: \"Toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The Current State Is: \", isOn.toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(ToggleButton, \"781ncfT5EimMrsq5ZStDBlx1pwQ=\");\n_c = ToggleButton;\nexport default ToggleButton;\nvar _c;\n$RefreshReg$(_c, \"ToggleButton\");","map":{"version":3,"names":["useState","React","jsxDEV","_jsxDEV","Fragment","_Fragment","ToggleButton","_s","isOn","setIsOn","toggle","isRaining","weather","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","toString","_c","$RefreshReg$"],"sources":["/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/ToggleButton.js"],"sourcesContent":["// Exercise 4:\n// 1. Create a functional component called ToggleButton.\n// 2. Declare a state variable `isOn` using the `useState` hook. Initialize it with a value of `false`.\n// 3. Create a function `toggle` that will be called when the button is clicked:\n//    - Inside the function, update the `isOn` state by toggling its value between `true` and `false`.\n// 4. Render the user interface:\n//    - Display a button element with the text \"Toggle\".\n//      - Attach the `toggle` function to the `onClick` event.\n//    - Display a paragraph element to show the current state:\n//      - If `isOn` is `true`, display the text \"ON\".\n//      - If `isOn` is `false`, display the text \"OFF\".\n// 5. Export the `ToggleButton` component as the default export.\n\nimport { useState } from \"react\";\nimport React from \"react\";\n\nconst ToggleButton = () => {\n    const [isOn, setIsOn] = useState(false);\n\n    const toggle = () => {\n        setIsOn(isOn ? false : true);\n        // isOn ? setIsOn(false) : setIsOn(true);\n        // if (isOn === false) {\n        //     setIsOn(true);\n        // } else {\n        //     setIsOn(false);\n        // }\n        let isRaining = true;\n        let weather;\n\n        if (isRaining) {\n         weather = \"It's raining\";\n        } else {\n  weather = \"It's not raining\";\n}\n    }\n    // need to add toString() because the state \n    // needs to be converted to a string \n    return (\n        <>\n            <button onClick={toggle}>Toggle</button>\n            <p>The Current State Is: {isOn.toString()}</p>\n        </>\n    )\n\n}\nexport default ToggleButton;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEvC,MAAMU,MAAM,GAAGA,CAAA,KAAM;IACjBD,OAAO,CAACD,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC;IAC5B;IACA;IACA;IACA;IACA;IACA;IACA,IAAIG,SAAS,GAAG,IAAI;IACpB,IAAIC,OAAO;IAEX,IAAID,SAAS,EAAE;MACdC,OAAO,GAAG,cAAc;IACzB,CAAC,MAAM;MACbA,OAAO,GAAG,kBAAkB;IAC9B;EACI,CAAC;EACD;EACA;EACA,oBACIT,OAAA,CAAAE,SAAA;IAAAQ,QAAA,gBACIV,OAAA;MAAQW,OAAO,EAAEJ,MAAO;MAAAG,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACxCf,OAAA;MAAAU,QAAA,GAAG,wBAAsB,EAACL,IAAI,CAACW,QAAQ,CAAC,CAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eAChD,CAAC;AAGX,CAAC;AAAAX,EAAA,CA7BKD,YAAY;AAAAc,EAAA,GAAZd,YAAY;AA8BlB,eAAeA,YAAY;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}