{"ast":null,"code":"var _s = $RefreshSig$();\n// 1. Create a functional component called NameList.\n// 2. Initialize names state variable with the initial array of names received as props.\n// 3. Initialize newName state variable with an empty string.\n// 4. Create a function addName:\n//    - Check if newName is not empty.\n//    - Create a new array by spreading the existing names array and adding newName at the end.\n//    - Update names state with the new array.\n//    - Clear newName state by setting it to an empty string.\n// 5. Create a function handleChange:\n//    - Update newName state with the new value entered by the user.\n// 6. Render the user interface:\n//    - Display an input field:\n//      - Bind value attribute to newName state.\n//      - Use onChange event to update newName state.\n//    - Display a button with the text \"Add\":\n//      - Attach addName function to onClick event.\n//    - Render a list element:\n//      - Map over names array.\n//      - For each name, render a list item to display the name.\n// 7. Export NameList component as the default export.\n\nimport React from \"react\";\nimport { useState } from \"react\";\nconst NameList = () => {\n  _s();\n  const [names, setNames] = useState([]);\n  const [newName, setNewName] = useState('');\n  const addName = () => {};\n  const handleChange = e => {\n    e.prevent.default();\n  };\n};\n_s(NameList, \"ySr/zq//SWOmP5cAp5YYEU/NSWg=\");\n_c = NameList;\nexport default NameList;\nvar _c;\n$RefreshReg$(_c, \"NameList\");","map":{"version":3,"names":["React","useState","NameList","_s","names","setNames","newName","setNewName","addName","handleChange","e","prevent","default","_c","$RefreshReg$"],"sources":["/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/NameList.js"],"sourcesContent":["// 1. Create a functional component called NameList.\n// 2. Initialize names state variable with the initial array of names received as props.\n// 3. Initialize newName state variable with an empty string.\n// 4. Create a function addName:\n//    - Check if newName is not empty.\n//    - Create a new array by spreading the existing names array and adding newName at the end.\n//    - Update names state with the new array.\n//    - Clear newName state by setting it to an empty string.\n// 5. Create a function handleChange:\n//    - Update newName state with the new value entered by the user.\n// 6. Render the user interface:\n//    - Display an input field:\n//      - Bind value attribute to newName state.\n//      - Use onChange event to update newName state.\n//    - Display a button with the text \"Add\":\n//      - Attach addName function to onClick event.\n//    - Render a list element:\n//      - Map over names array.\n//      - For each name, render a list item to display the name.\n// 7. Export NameList component as the default export.\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nconst NameList = () => {\n    const [names, setNames] = useState([]);\n    const [newName, setNewName] = useState('');\n\n    const addName = () => {\n\n    }\n    const handleChange = (e) => {\n        e.prevent.default();\n    }\n}\n\nexport default NameList;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMO,OAAO,GAAGA,CAAA,KAAM,CAEtB,CAAC;EACD,MAAMC,YAAY,GAAIC,CAAC,IAAK;IACxBA,CAAC,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;EACvB,CAAC;AACL,CAAC;AAAAT,EAAA,CAVKD,QAAQ;AAAAW,EAAA,GAARX,QAAQ;AAYd,eAAeA,QAAQ;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}