{"ast":null,"code":"var _jsxFileName = \"/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/NameList.js\",\n  _s = $RefreshSig$();\n// 1. Create a functional component called NameList.\n// 2. Initialize names state variable with the initial array of names received as props.\n// 3. Initialize newName state variable with an empty string.\n// 4. Create a function addName:\n//    - Check if newName is not empty.\n//    - Create a new array by spreading the existing names array and adding newName at the end.\n//    - Update names state with the new array.\n//    - Clear newName state by setting it to an empty string.\n// 5. Create a function handleChange:\n//    - Update newName state with the new value entered by the user.\n// 6. Render the user interface:\n//    - Display an input field:\n//      - Bind value attribute to newName state.\n//      - Use onChange event to update newName state.\n//    - Display a button with the text \"Add\":\n//      - Attach addName function to onClick event.\n//    - Render a list element:\n//      - Map over names array.\n//      - For each name, render a list item to display the name.\n// 7. Export NameList component as the default export.\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport ListItem from \"./ListItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NameList = () => {\n  _s();\n  const [names, setNames] = useState([]);\n  const [newName, setNewName] = useState('');\n  const addName = () => {\n    if (newName != '') {\n      const newArr = [...names];\n      setNames(newArr);\n      // setNewName('');\n    }\n  };\n\n  const handleChange = () => {\n    setNewName();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: newName,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onChange: addName,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: names.map(name => /*#__PURE__*/_jsxDEV(ListItem, {\n        name: names\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(NameList, \"ySr/zq//SWOmP5cAp5YYEU/NSWg=\");\n_c = NameList;\nexport default NameList;\nvar _c;\n$RefreshReg$(_c, \"NameList\");","map":{"version":3,"names":["React","useState","ListItem","jsxDEV","_jsxDEV","Fragment","_Fragment","NameList","_s","names","setNames","newName","setNewName","addName","newArr","handleChange","children","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","name","_c","$RefreshReg$"],"sources":["/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/NameList.js"],"sourcesContent":["// 1. Create a functional component called NameList.\n// 2. Initialize names state variable with the initial array of names received as props.\n// 3. Initialize newName state variable with an empty string.\n// 4. Create a function addName:\n//    - Check if newName is not empty.\n//    - Create a new array by spreading the existing names array and adding newName at the end.\n//    - Update names state with the new array.\n//    - Clear newName state by setting it to an empty string.\n// 5. Create a function handleChange:\n//    - Update newName state with the new value entered by the user.\n// 6. Render the user interface:\n//    - Display an input field:\n//      - Bind value attribute to newName state.\n//      - Use onChange event to update newName state.\n//    - Display a button with the text \"Add\":\n//      - Attach addName function to onClick event.\n//    - Render a list element:\n//      - Map over names array.\n//      - For each name, render a list item to display the name.\n// 7. Export NameList component as the default export.\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport ListItem from \"./ListItem\";\n\nconst NameList = () => {\n    const [names, setNames] = useState([]);\n    const [newName, setNewName] = useState('');\n\n    const addName = () => {\n        if (newName != ''){\n            const newArr = [...names];\n            setNames(newArr);\n            // setNewName('');\n        }\n    }\n    const handleChange = () => {\n        setNewName();\n    }\n    return (\n        <>\n            <input value={newName} onChange={handleChange}></input>\n            <button onChange={addName}>Add</button>\n            <ul>\n                {names.map(name => (\n                    <ListItem name={names}/>\n                ))}\n            </ul>\n        </>\n    )\n}\n\nexport default NameList;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMY,OAAO,GAAGA,CAAA,KAAM;IAClB,IAAIF,OAAO,IAAI,EAAE,EAAC;MACd,MAAMG,MAAM,GAAG,CAAC,GAAGL,KAAK,CAAC;MACzBC,QAAQ,CAACI,MAAM,CAAC;MAChB;IACJ;EACJ,CAAC;;EACD,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACvBH,UAAU,CAAC,CAAC;EAChB,CAAC;EACD,oBACIR,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACIZ,OAAA;MAAOa,KAAK,EAAEN,OAAQ;MAACO,QAAQ,EAAEH;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvDlB,OAAA;MAAQc,QAAQ,EAAEL,OAAQ;MAAAG,QAAA,EAAC;IAAG;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvClB,OAAA;MAAAY,QAAA,EACKP,KAAK,CAACc,GAAG,CAACC,IAAI,iBACXpB,OAAA,CAACF,QAAQ;QAACsB,IAAI,EAAEf;MAAM;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAC1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA,eACP,CAAC;AAEX,CAAC;AAAAd,EAAA,CAzBKD,QAAQ;AAAAkB,EAAA,GAARlB,QAAQ;AA2Bd,eAAeA,QAAQ;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}