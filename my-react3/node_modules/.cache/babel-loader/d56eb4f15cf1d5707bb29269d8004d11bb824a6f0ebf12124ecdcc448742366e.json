{"ast":null,"code":"var _jsxFileName = \"/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/RandomQuote.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RandomQuote = () => {\n  _s();\n  const [quote, setQuote] = useState([]);\n  useEffect(() => {\n    const fetchQuotes = async () => {\n      try {\n        const response = await fetch('https://quote-garden.onrender.com/api/v3/quotes');\n        const data = await response.json();\n        const quoteArr = data.data;\n        const id = data.data;\n        console.log(quoteArr);\n        setQuote(quoteArr);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchQuotes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: quote.map(quote => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: quote\n    }, quote.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(RandomQuote, \"/HRu3WvhbM4TYP9mJvPMknS0c0I=\");\n_c = RandomQuote;\nexport default RandomQuote;\n\n// Build a component that fetches and displays a random quote \n// from an API. Use useEffect to fetch the data and update the \n// component's state. Display the quote on the screen.\nvar _c;\n$RefreshReg$(_c, \"RandomQuote\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RandomQuote","_s","quote","setQuote","fetchQuotes","response","fetch","data","json","quoteArr","id","console","log","error","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/RandomQuote.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nconst RandomQuote = () => {\n    const [quote, setQuote] = useState([]);\n    \n    useEffect(() => {\n        const fetchQuotes = async () => {\n            try { \n                const response = await fetch('https://quote-garden.onrender.com/api/v3/quotes');\n                const data = await response.json();\n                const quoteArr = data.data;\n                const id = data.data\n                console.log(quoteArr);\n                setQuote(quoteArr);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        fetchQuotes();\n    }, []);\n\n    return (\n        <ul>\n            {quote.map((quote) => \n            <li key={quote.id}>{quote}</li>)}\n        </ul>\n    )\n}\n\nexport default RandomQuote;\n\n// Build a component that fetches and displays a random quote \n// from an API. Use useEffect to fetch the data and update the \n// component's state. Display the quote on the screen."],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,CAAC;QAC/E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,MAAMC,QAAQ,GAAGF,IAAI,CAACA,IAAI;QAC1B,MAAMG,EAAE,GAAGH,IAAI,CAACA,IAAI;QACpBI,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;QACrBN,QAAQ,CAACM,QAAQ,CAAC;MACtB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;MACtB;IACJ,CAAC;IACDT,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIL,OAAA;IAAAe,QAAA,EACKZ,KAAK,CAACa,GAAG,CAAEb,KAAK,iBACjBH,OAAA;MAAAe,QAAA,EAAoBZ;IAAK,GAAhBA,KAAK,CAACQ,EAAE;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEb,CAAC;AAAAlB,EAAA,CAzBKD,WAAW;AAAAoB,EAAA,GAAXpB,WAAW;AA2BjB,eAAeA,WAAW;;AAE1B;AACA;AACA;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}