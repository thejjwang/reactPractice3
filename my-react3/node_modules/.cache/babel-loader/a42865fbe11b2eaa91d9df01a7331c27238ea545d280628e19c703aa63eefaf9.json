{"ast":null,"code":"var _jsxFileName = \"/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/ColorChanger.js\",\n  _s = $RefreshSig$();\n// 1. Create a functional component called ColorChanger.\n// 2. Declare a state variable `backgroundColor` using the `useState` hook. Initialize it with an initial color value.\n// 3. Create a function `changeColor` that will be called when the \"Change Color\" button is clicked: \n//    - Inside the function, generate a random color value.\n//    - Update the `backgroundColor` state with the new color value.\n// 4. Create a function `resetColor` that will be called when the \"Reset Color\" button is clicked:\n//    - Inside the function, reset the `backgroundColor` state to the initial color value.\n// 5. Render the user interface:\n//    - Display a div element with a style attribute:\n//      - Set the `backgroundColor` style property to the value of the `backgroundColor` state.\n//    - Display a button element with the text \"Change Color\":\n//      - Attach the `changeColor` function to the `onClick` event.\n//    - Display a button element with the text \"Reset Color\":\n//      - Attach the `resetColor` function to the `onClick` event.\n// 6. Export the `ColorChanger` component as the default export.\n\nimport { useState } from \"react\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ColorChanger = () => {\n  _s();\n  const [backgroundColor, setbackgroundColor] = useState('red');\n  const changeColor = () => {\n    // to get a random color im multiplying it by the maximum value ()\n    const randomColor = Math.floor(Math.random() * 16777215).toString(16);\n    setbackgroundColor();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(ColorChanger, \"KIsdM+uieDRphO2qrRD+o2bzxU8=\");\n_c = ColorChanger;\nexport default ColorChanger;\nvar _c;\n$RefreshReg$(_c, \"ColorChanger\");","map":{"version":3,"names":["useState","React","jsxDEV","_jsxDEV","Fragment","_Fragment","ColorChanger","_s","backgroundColor","setbackgroundColor","changeColor","randomColor","Math","floor","random","toString","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/ColorChanger.js"],"sourcesContent":["// 1. Create a functional component called ColorChanger.\n// 2. Declare a state variable `backgroundColor` using the `useState` hook. Initialize it with an initial color value.\n// 3. Create a function `changeColor` that will be called when the \"Change Color\" button is clicked: \n//    - Inside the function, generate a random color value.\n//    - Update the `backgroundColor` state with the new color value.\n// 4. Create a function `resetColor` that will be called when the \"Reset Color\" button is clicked:\n//    - Inside the function, reset the `backgroundColor` state to the initial color value.\n// 5. Render the user interface:\n//    - Display a div element with a style attribute:\n//      - Set the `backgroundColor` style property to the value of the `backgroundColor` state.\n//    - Display a button element with the text \"Change Color\":\n//      - Attach the `changeColor` function to the `onClick` event.\n//    - Display a button element with the text \"Reset Color\":\n//      - Attach the `resetColor` function to the `onClick` event.\n// 6. Export the `ColorChanger` component as the default export.\n\nimport { useState } from \"react\";\nimport React from \"react\";\n\nconst ColorChanger = () => {\n    const [backgroundColor, setbackgroundColor] = useState('red');\n\n    const changeColor = () => {\n        // to get a random color im multiplying it by the maximum value ()\n        const randomColor = Math.floor(Math.random()*16777215).toString(16);\n        setbackgroundColor()\n    }\n    return (\n        <>\n            <button onClick={changeColor}></button>\n        </>\n    )\n}\n\nexport default ColorChanger;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACtB;IACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;IACnEN,kBAAkB,CAAC,CAAC;EACxB,CAAC;EACD,oBACIN,OAAA,CAAAE,SAAA;IAAAW,QAAA,eACIb,OAAA;MAAQc,OAAO,EAAEP;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC,gBACzC,CAAC;AAEX,CAAC;AAAAd,EAAA,CAbKD,YAAY;AAAAgB,EAAA,GAAZhB,YAAY;AAelB,eAAeA,YAAY;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}