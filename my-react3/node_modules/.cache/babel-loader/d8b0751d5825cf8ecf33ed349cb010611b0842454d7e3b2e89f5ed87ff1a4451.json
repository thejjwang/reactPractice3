{"ast":null,"code":"var _jsxFileName = \"/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/ToggleButton.js\",\n  _s = $RefreshSig$();\n// Exercise 4:\n// 1. Create a functional component called ToggleButton.\n// 2. Declare a state variable `isOn` using the `useState` hook. Initialize it with a value of `false`.\n// 3. Create a function `toggle` that will be called when the button is clicked:\n//    - Inside the function, update the `isOn` state by toggling its value between `true` and `false`.\n// 4. Render the user interface:\n//    - Display a button element with the text \"Toggle\".\n//      - Attach the `toggle` function to the `onClick` event.\n//    - Display a paragraph element to show the current state:\n//      - If `isOn` is `true`, display the text \"ON\".\n//      - If `isOn` is `false`, display the text \"OFF\".\n// 5. Export the `ToggleButton` component as the default export.\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ToggleButton = () => {\n  _s();\n  const [isOn, setIsOn] = useState(false);\n  const toggle = () => {\n    if (ison === false) {\n      setIsOn(true);\n    } else {\n      setIsOn(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggle,\n      children: \"Toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current State is: \", ison]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(ToggleButton, \"781ncfT5EimMrsq5ZStDBlx1pwQ=\");\n_c = ToggleButton;\nexport default ToggleButton;\nvar _c;\n$RefreshReg$(_c, \"ToggleButton\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","ToggleButton","_s","isOn","setIsOn","useState","toggle","ison","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/ToggleButton.js"],"sourcesContent":["// Exercise 4:\n// 1. Create a functional component called ToggleButton.\n// 2. Declare a state variable `isOn` using the `useState` hook. Initialize it with a value of `false`.\n// 3. Create a function `toggle` that will be called when the button is clicked:\n//    - Inside the function, update the `isOn` state by toggling its value between `true` and `false`.\n// 4. Render the user interface:\n//    - Display a button element with the text \"Toggle\".\n//      - Attach the `toggle` function to the `onClick` event.\n//    - Display a paragraph element to show the current state:\n//      - If `isOn` is `true`, display the text \"ON\".\n//      - If `isOn` is `false`, display the text \"OFF\".\n// 5. Export the `ToggleButton` component as the default export.\n\n\nimport React from \"react\";\n\nconst ToggleButton = () => {\n    const [isOn, setIsOn] = useState(false);\n\n    const toggle = () => {\n        if (ison === false) {\n            setIsOn(true);\n        } else {\n            setIsOn(false);\n        }\n    }\n    return (\n        <>\n            <button onClick={toggle}>Toggle</button>\n            <p>Current State is: {ison}</p>\n        </>\n    )\n\n}\nexport default ToggleButton;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAEvC,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACjB,IAAIC,IAAI,KAAK,KAAK,EAAE;MAChBH,OAAO,CAAC,IAAI,CAAC;IACjB,CAAC,MAAM;MACHA,OAAO,CAAC,KAAK,CAAC;IAClB;EACJ,CAAC;EACD,oBACIN,OAAA,CAAAE,SAAA;IAAAQ,QAAA,gBACIV,OAAA;MAAQW,OAAO,EAAEH,MAAO;MAAAE,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACxCf,OAAA;MAAAU,QAAA,GAAG,oBAAkB,EAACD,IAAI;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eACjC,CAAC;AAGX,CAAC;AAAAX,EAAA,CAjBKD,YAAY;AAAAa,EAAA,GAAZb,YAAY;AAkBlB,eAAeA,YAAY;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}