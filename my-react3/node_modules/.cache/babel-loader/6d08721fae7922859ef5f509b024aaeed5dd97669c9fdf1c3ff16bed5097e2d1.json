{"ast":null,"code":"var _jsxFileName = \"/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/ColorChanger.js\",\n  _s = $RefreshSig$();\n// 1. Create a functional component called ColorChanger.\n// 2. Declare a state variable `backgroundColor` using the `useState` hook. Initialize it with an initial color value.\n// 3. Create a function `changeColor` that will be called when the \"Change Color\" button is clicked: \n//    - Inside the function, generate a random color value.\n//    - Update the `backgroundColor` state with the new color value.\n// 4. Create a function `resetColor` that will be called when the \"Reset Color\" button is clicked:\n//    - Inside the function, reset the `backgroundColor` state to the initial color value.\n// 5. Render the user interface:\n//    - Display a div element with a style attribute:\n//      - Set the `backgroundColor` style property to the value of the `backgroundColor` state.\n//    - Display a button element with the text \"Change Color\":\n//      - Attach the `changeColor` function to the `onClick` event.\n//    - Display a button element with the text \"Reset Color\":\n//      - Attach the `resetColor` function to the `onClick` event.\n// 6. Export the `ColorChanger` component as the default export.\n\nimport { useState } from \"react\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = 'red';\nconst ColorChanger = () => {\n  _s();\n  const [backgroundColor, setbackgroundColor] = useState(initialState);\n  const changeColor = () => {\n    const colors = ['red', 'green', 'blue'];\n    const random = Math.floor(Math.random() * colors.length);\n    const randomColor = colors[random];\n    console.log(randomColor);\n    // math random generates between 0 and 1\n    // .toString(16) converts the rounded number to a hexadecimal string representation.\n    // The 16 specifies the base of the number system, which is hexadecimal (base-16). \n    // This converts the number to a string that represents a random color in hexadecimal format.\n    // to get a random color im multiplying it by the maximum value in the RGB color range (256^3 - 1)\n    // const randomColor = Math.floor(Math.random()*16777215).toString(16);\n    // const color = \"#\"+ randomColor;\n    // setbackgroundColor(color)\n    // console.log(color);   \n  };\n\n  const resetColor = () => {\n    setbackgroundColor(initialState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: {\n        randomColor\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeColor,\n      children: \"Change Color\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetColor,\n      children: \"Reset Color\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(ColorChanger, \"DKdAKSKkpN/6hfGgD1MUcVi+iS4=\");\n_c = ColorChanger;\nexport default ColorChanger;\nvar _c;\n$RefreshReg$(_c, \"ColorChanger\");","map":{"version":3,"names":["useState","React","jsxDEV","_jsxDEV","initialState","ColorChanger","_s","backgroundColor","setbackgroundColor","changeColor","colors","random","Math","floor","length","randomColor","console","log","resetColor","style","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jj/Desktop/Ahsan/practiceReact3/my-react3/src/ColorChanger.js"],"sourcesContent":["// 1. Create a functional component called ColorChanger.\n// 2. Declare a state variable `backgroundColor` using the `useState` hook. Initialize it with an initial color value.\n// 3. Create a function `changeColor` that will be called when the \"Change Color\" button is clicked: \n//    - Inside the function, generate a random color value.\n//    - Update the `backgroundColor` state with the new color value.\n// 4. Create a function `resetColor` that will be called when the \"Reset Color\" button is clicked:\n//    - Inside the function, reset the `backgroundColor` state to the initial color value.\n// 5. Render the user interface:\n//    - Display a div element with a style attribute:\n//      - Set the `backgroundColor` style property to the value of the `backgroundColor` state.\n//    - Display a button element with the text \"Change Color\":\n//      - Attach the `changeColor` function to the `onClick` event.\n//    - Display a button element with the text \"Reset Color\":\n//      - Attach the `resetColor` function to the `onClick` event.\n// 6. Export the `ColorChanger` component as the default export.\n\nimport { useState } from \"react\";\nimport React from \"react\";\n\nconst initialState = 'red';\n\nconst ColorChanger = () => {\n    const [backgroundColor, setbackgroundColor] = useState(initialState);\n\n    const changeColor = () => {\n        const colors = ['red', 'green', 'blue'];\n        const random = Math.floor(Math.random()*colors.length);\n        const randomColor = colors[random];\n        console.log(randomColor); \n        // math random generates between 0 and 1\n        // .toString(16) converts the rounded number to a hexadecimal string representation.\n        // The 16 specifies the base of the number system, which is hexadecimal (base-16). \n        // This converts the number to a string that represents a random color in hexadecimal format.\n        // to get a random color im multiplying it by the maximum value in the RGB color range (256^3 - 1)\n        // const randomColor = Math.floor(Math.random()*16777215).toString(16);\n        // const color = \"#\"+ randomColor;\n        // setbackgroundColor(color)\n        // console.log(color);   \n    }\n    const resetColor = () => {\n        setbackgroundColor(initialState);\n    }\n\n    return (\n        <div style={{backgroundColor: {randomColor}}}>\n            \n            <button onClick={changeColor}>Change Color</button>\n            <button onClick={resetColor}>Reset Color</button>\n        </div>\n    )\n}\n\nexport default ColorChanger;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAG,KAAK;AAE1B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAACI,YAAY,CAAC;EAEpE,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMC,MAAM,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC;IACvC,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACD,MAAM,CAAC,CAAC,GAACD,MAAM,CAACI,MAAM,CAAC;IACtD,MAAMC,WAAW,GAAGL,MAAM,CAACC,MAAM,CAAC;IAClCK,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;IACxB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EACD,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACrBV,kBAAkB,CAACJ,YAAY,CAAC;EACpC,CAAC;EAED,oBACID,OAAA;IAAKgB,KAAK,EAAE;MAACZ,eAAe,EAAE;QAACQ;MAAW;IAAC,CAAE;IAAAK,QAAA,gBAEzCjB,OAAA;MAAQkB,OAAO,EAAEZ,WAAY;MAAAW,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnDtB,OAAA;MAAQkB,OAAO,EAAEH,UAAW;MAAAE,QAAA,EAAC;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEd,CAAC;AAAAnB,EAAA,CA7BKD,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AA+BlB,eAAeA,YAAY;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}